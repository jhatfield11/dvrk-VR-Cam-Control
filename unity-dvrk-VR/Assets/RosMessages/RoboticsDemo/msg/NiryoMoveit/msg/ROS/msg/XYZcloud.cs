//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using RosMessageGeneration;

namespace RosMessageTypes.ROS
{
    public class XYZcloud : Message
    {
        public const string RosMessageName = "ROS/XYZcloud";

        public double[] X;
        public double[] Y;
        public double[] Z;

        public XYZcloud()
        {
            this.X = new double[0];
            this.Y = new double[0];
            this.Z = new double[0];
        }

        public XYZcloud(double[] X, double[] Y, double[] Z)
        {
            this.X = X;
            this.Y = Y;
            this.Z = Z;
        }
        public override List<byte[]> SerializationStatements()
        {
            var listOfSerializations = new List<byte[]>();
            
            listOfSerializations.Add(BitConverter.GetBytes(X.Length));
            foreach(var entry in X)
                listOfSerializations.Add(BitConverter.GetBytes(entry));
            
            listOfSerializations.Add(BitConverter.GetBytes(Y.Length));
            foreach(var entry in Y)
                listOfSerializations.Add(BitConverter.GetBytes(entry));
            
            listOfSerializations.Add(BitConverter.GetBytes(Z.Length));
            foreach(var entry in Z)
                listOfSerializations.Add(BitConverter.GetBytes(entry));

            return listOfSerializations;
        }

        public override int Deserialize(byte[] data, int offset)
        {
            
            var XArrayLength = DeserializeLength(data, offset);
            offset += 4;
            this.X= new double[XArrayLength];
            for(var i = 0; i < XArrayLength; i++)
            {
                this.X[i] = BitConverter.ToDouble(data, offset);
                offset += 8;
            }
            
            var YArrayLength = DeserializeLength(data, offset);
            offset += 4;
            this.Y= new double[YArrayLength];
            for(var i = 0; i < YArrayLength; i++)
            {
                this.Y[i] = BitConverter.ToDouble(data, offset);
                offset += 8;
            }
            
            var ZArrayLength = DeserializeLength(data, offset);
            offset += 4;
            this.Z= new double[ZArrayLength];
            for(var i = 0; i < ZArrayLength; i++)
            {
                this.Z[i] = BitConverter.ToDouble(data, offset);
                offset += 8;
            }

            return offset;
        }

        public override string ToString()
        {
            return "XYZcloud: " +
            "\nX: " + System.String.Join(", ", X.ToList()) +
            "\nY: " + System.String.Join(", ", Y.ToList()) +
            "\nZ: " + System.String.Join(", ", Z.ToList());
        }
    }
}
